def precedence(op):
    if op == '+' or op == '-':
        return 1
    if op == '*' or op == '/':
        return 2
    if op == '^':
        return 3
    return 0

def infix_to_postfix(expression):
    stack = []
    output = ''
    
    for char in expression:
        if char.isalnum():  # If the character is an operand, add it to output
            output += char
        elif char == '(':
            stack.append(char)
        elif char == ')':
            while stack and stack[-1] != '(':
                output += stack.pop()
            stack.pop()  # Remove '('
        else:  # Operator encountered
            while stack and precedence(stack[-1]) >= precedence(char):
                output += stack.pop()
            stack.append(char)
    
    while stack:
        output += stack.pop()
    
    return output

# Example usage:
infix_expr = "a+b*(c^d-e)^(f+g*h)-i"
print("Postfix Expression:", infix_to_postfix(infix_expr))
